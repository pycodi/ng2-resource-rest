import { mapToModel } from './ResourceAction';
export function ResourceModelParams(params) {
    return function (target) {
        var providers = [];
        if (params) {
            providers = params.providers || [];
        }
        Reflect.defineMetadata('providers', providers, target);
    };
}
export var ResourceModel = (function () {
    function ResourceModel() {
        this.$primaryKey = 'id';
    }
    ResourceModel.create = function (data, commit) {
        if (data === void 0) { data = {}; }
        if (commit === void 0) { commit = true; }
        if (!this.resourceInstance) {
            console.error('You should first instantiate Resource by injecting.');
        }
        var result = mapToModel.bind(this.resourceInstance)(data, this);
        if (commit) {
            result = result.$save();
        }
        return result;
    };
    ResourceModel.prototype.$fillFromObject = function (_object) {
        for (var propName in _object) {
            this[propName] = _object[propName];
        }
        return this;
    };
    ResourceModel.prototype.$getData = function () {
        var _object = {};
        for (var propName in this) {
            if (!(this[propName] instanceof Function) && !(propName.charAt(0) === '$')) {
                _object[propName] = this[propName];
            }
        }
        return _object;
    };
    ResourceModel.prototype.$save = function () {
        if (this[this.$primaryKey]) {
            return this.$update();
        }
        else {
            return this.$create();
        }
    };
    ResourceModel.prototype.$update = function () {
        return this.$resource_method('update');
    };
    ResourceModel.prototype.$remove = function () {
        return this.$resource_method('remove');
    };
    ResourceModel.prototype.$resource_method = function (method_name) {
        var _this = this;
        var _method = this.$resource[method_name];
        if (!_method) {
            console.error("Your Resource has no implemented " + method_name + " method.");
            return this;
        }
        var data = (method_name === 'remove') ? { id: this[this.$primaryKey] } : this.$getData();
        var result = _method.bind(this.$resource)(data);
        this.$resolved = result.$resolved;
        this.$observable = result.$observable;
        this.$abortRequest = result.$abortRequest;
        this.$observable.subscribe(function (resp) {
            _this.$fillFromObject(resp.$getData());
        });
        return this;
    };
    ResourceModel.prototype.$create = function () {
        return this.$resource_method('create');
    };
    return ResourceModel;
}());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVzb3VyY2VNb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlJlc291cmNlTW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BSU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxrQkFBa0I7QUFJM0Msb0NBQW9DLE1BQWdDO0lBRWxFLE1BQU0sQ0FBQyxVQUFVLE1BQTJCO1FBQzFDLElBQUksU0FBUyxHQUFVLEVBQUUsQ0FBQztRQUMxQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1FBQ3JDLENBQUM7UUFFSyxPQUFRLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEUsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUdEO0lBQUE7UUFRRSxnQkFBVyxHQUFXLElBQUksQ0FBQztJQXNFN0IsQ0FBQztJQW5FUSxvQkFBTSxHQUFiLFVBQWMsSUFBYyxFQUFFLE1BQXNCO1FBQXRDLG9CQUFjLEdBQWQsU0FBYztRQUFFLHNCQUFzQixHQUF0QixhQUFzQjtRQUNsRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDM0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1FBQ3ZFLENBQUM7UUFDRCxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU0sdUNBQWUsR0FBdEIsVUFBdUIsT0FBWTtRQUNqQyxHQUFHLENBQUMsQ0FBQyxJQUFJLFFBQVEsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sZ0NBQVEsR0FBZjtRQUNFLElBQUksT0FBTyxHQUFRLEVBQUUsQ0FBQztRQUN0QixHQUFHLENBQUMsQ0FBQyxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBTyxJQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRixPQUFPLENBQUMsUUFBUSxDQUFDLEdBQVMsSUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzVDLENBQUM7UUFDSCxDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRU0sNkJBQUssR0FBWjtRQUNFLEVBQUUsQ0FBQyxDQUFPLElBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDeEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN4QixDQUFDO0lBQ0gsQ0FBQztJQUVNLCtCQUFPLEdBQWQ7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTSwrQkFBTyxHQUFkO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU8sd0NBQWdCLEdBQXhCLFVBQXlCLFdBQW1CO1FBQTVDLGlCQWlCQztRQWhCQyxJQUFJLE9BQU8sR0FBUyxJQUFJLENBQUMsU0FBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQW9DLFdBQVcsYUFBVSxDQUFDLENBQUM7WUFDekUsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxJQUFJLElBQUksR0FBRyxDQUFDLFdBQVcsS0FBSyxRQUFRLENBQUMsR0FBRyxFQUFDLEVBQUUsRUFBUSxJQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRTlGLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNsQyxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQUEsSUFBSTtZQUM3QixLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTywrQkFBTyxHQUFmO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUgsb0JBQUM7QUFBRCxDQUFDLEFBOUVELElBOEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUeXBlfSBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy90eXBlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcy9SeCc7XG5pbXBvcnQge1Jlc291cmNlTW9kZWxQYXJhbXNCYXNlfSBmcm9tICcuL0ludGVyZmFjZXMnO1xuaW1wb3J0IHtSZXNvdXJjZX0gZnJvbSAnLi9SZXNvdXJjZSc7XG5pbXBvcnQge21hcFRvTW9kZWx9IGZyb20gJy4vUmVzb3VyY2VBY3Rpb24nO1xuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIFJlc291cmNlTW9kZWxQYXJhbXMocGFyYW1zPzogUmVzb3VyY2VNb2RlbFBhcmFtc0Jhc2UpIHtcblxuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogVHlwZTxSZXNvdXJjZU1vZGVsPikge1xuICAgIGxldCBwcm92aWRlcnM6IGFueVtdID0gW107XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgcHJvdmlkZXJzID0gcGFyYW1zLnByb3ZpZGVycyB8fCBbXTtcbiAgICB9XG5cbiAgICAoPGFueT5SZWZsZWN0KS5kZWZpbmVNZXRhZGF0YSgncHJvdmlkZXJzJywgcHJvdmlkZXJzLCB0YXJnZXQpO1xuICB9O1xufVxuXG5cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZU1vZGVsIHtcblxuICBzdGF0aWMgcmVzb3VyY2VDbGFzczogVHlwZTxSZXNvdXJjZT47XG4gIHN0YXRpYyByZXNvdXJjZUluc3RhbmNlOiBSZXNvdXJjZTtcblxuICAkcmVzb2x2ZWQ6IGJvb2xlYW47XG4gICRvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGFueT47XG4gICRhYm9ydFJlcXVlc3Q6ICgpID0+IHZvaWQ7XG4gICRwcmltYXJ5S2V5OiBzdHJpbmcgPSAnaWQnO1xuICAkcmVzb3VyY2U6IFJlc291cmNlO1xuXG4gIHN0YXRpYyBjcmVhdGUoZGF0YTogYW55ID0ge30sIGNvbW1pdDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBpZiAoIXRoaXMucmVzb3VyY2VJbnN0YW5jZSkge1xuICAgICAgY29uc29sZS5lcnJvcignWW91IHNob3VsZCBmaXJzdCBpbnN0YW50aWF0ZSBSZXNvdXJjZSBieSBpbmplY3RpbmcuJyk7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBtYXBUb01vZGVsLmJpbmQodGhpcy5yZXNvdXJjZUluc3RhbmNlKShkYXRhLCB0aGlzKTtcbiAgICBpZiAoY29tbWl0KSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQuJHNhdmUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyAkZmlsbEZyb21PYmplY3QoX29iamVjdDogYW55KSB7XG4gICAgZm9yIChsZXQgcHJvcE5hbWUgaW4gX29iamVjdCkge1xuICAgICAgKDxhbnk+dGhpcylbcHJvcE5hbWVdID0gX29iamVjdFtwcm9wTmFtZV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljICRnZXREYXRhKCkge1xuICAgIGxldCBfb2JqZWN0OiBhbnkgPSB7fTtcbiAgICBmb3IgKGxldCBwcm9wTmFtZSBpbiB0aGlzKSB7XG4gICAgICBpZiAoISgoPGFueT50aGlzKVtwcm9wTmFtZV0gaW5zdGFuY2VvZiBGdW5jdGlvbikgJiYgIShwcm9wTmFtZS5jaGFyQXQoMCkgPT09ICckJykpIHtcbiAgICAgICAgX29iamVjdFtwcm9wTmFtZV0gPSAoPGFueT50aGlzKVtwcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfb2JqZWN0O1xuICB9XG5cbiAgcHVibGljICRzYXZlKCkge1xuICAgIGlmICgoPGFueT50aGlzKVt0aGlzLiRwcmltYXJ5S2V5XSkge1xuICAgICAgcmV0dXJuIHRoaXMuJHVwZGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljICR1cGRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHJlc291cmNlX21ldGhvZCgndXBkYXRlJyk7XG4gIH1cblxuICBwdWJsaWMgJHJlbW92ZSgpIHtcbiAgICByZXR1cm4gdGhpcy4kcmVzb3VyY2VfbWV0aG9kKCdyZW1vdmUnKTtcbiAgfVxuXG4gIHByaXZhdGUgJHJlc291cmNlX21ldGhvZChtZXRob2RfbmFtZTogc3RyaW5nKSB7XG4gICAgbGV0IF9tZXRob2QgPSAoPGFueT50aGlzLiRyZXNvdXJjZSlbbWV0aG9kX25hbWVdO1xuICAgIGlmICghX21ldGhvZCkge1xuICAgICAgY29uc29sZS5lcnJvcihgWW91ciBSZXNvdXJjZSBoYXMgbm8gaW1wbGVtZW50ZWQgJHttZXRob2RfbmFtZX0gbWV0aG9kLmApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGxldCBkYXRhID0gKG1ldGhvZF9uYW1lID09PSAncmVtb3ZlJykgPyB7aWQ6ICg8YW55PnRoaXMpW3RoaXMuJHByaW1hcnlLZXldfSA6IHRoaXMuJGdldERhdGEoKTtcblxuICAgIGxldCByZXN1bHQgPSBfbWV0aG9kLmJpbmQodGhpcy4kcmVzb3VyY2UpKGRhdGEpO1xuICAgIHRoaXMuJHJlc29sdmVkID0gcmVzdWx0LiRyZXNvbHZlZDtcbiAgICB0aGlzLiRvYnNlcnZhYmxlID0gcmVzdWx0LiRvYnNlcnZhYmxlO1xuICAgIHRoaXMuJGFib3J0UmVxdWVzdCA9IHJlc3VsdC4kYWJvcnRSZXF1ZXN0O1xuICAgIHRoaXMuJG9ic2VydmFibGUuc3Vic2NyaWJlKHJlc3AgPT4ge1xuICAgICAgdGhpcy4kZmlsbEZyb21PYmplY3QocmVzcC4kZ2V0RGF0YSgpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHJpdmF0ZSAkY3JlYXRlKCkge1xuICAgIHJldHVybiB0aGlzLiRyZXNvdXJjZV9tZXRob2QoJ2NyZWF0ZScpO1xuICB9XG5cbn1cbiJdfQ==